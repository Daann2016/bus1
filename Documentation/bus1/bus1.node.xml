<?xml version='1.0'?> <!--*-nxml-*-->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
        "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<refentry id="bus1.node">

  <refentryinfo>
    <title>bus1.node</title>
    <productname>bus1</productname>
  </refentryinfo>

  <refmeta>
    <refentrytitle>bus1.node</refentrytitle>
    <manvolnum>7</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>bus1.node</refname>
    <refpurpose>Bus Node</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Description</title>
    <para>
      A node is first and foremost a destination for messages. A peer may own
      several nodes, and messages destined for a node will be received by the
      peer that owns the node.
    </para>

    <para>
      A handle is a reference to a node, and there is no other way to refer to a
      node than by one of its handles. A handle is local to its holder, and is
      how the holder of a handle is connected to the owner of the corresponding
      node. When sending a message, the (possibly remote) destination nodes of
      the message are represented by (local) handles referring to the node.
    </para>

    <para>
      A handle may be passed from one peer to another, just like
      file-descriptors are passed over UDS (or bus1 for that matter). When
      passing a handle a copy of it is installed in the destination peer which
      references the same underlying node. There is otherwise no relation
      between the original and the passed handle.
    </para>
  </refsect1>

  <refsect1>
    <title>Handle ids</title>
    <para>
      Handles are referred to in userspace by their handle ids, like
      file-descriptors are referenced by file-descriptor number. The handle id
      namespace is local to a given peer (not a process), and has no meaning
      outside of it. Handle ids are allocated in the order the handles are
      received as a contiguous sequence of odd numbers starting with
      <constant>1</constant>. A handle only ever has one handle id associated
      with it, and a handle id is never reused to refer to two handles. In
      particular, if a handle is fully released and a new handle is received to
      the same node, it is guaranteed to be assigned a fresh handle id.
    </para>
  </refsect1>

  <refsect1>
    <title>Node ids</title>
    <para>
      Nodes can not be referenced directly, but only through their handles. The
      owner of a node will initially also hold a handle to that node. However,
      the handle can be released, and the owner of a node does not need to own
      a handle to it. Even after the handle has potentially been released the
      handle id will be used whenever referring to the underlying node. This is
      also the case if the owner holds a new handle to the same node with a
      different handle id.
    </para>
  </refsect1>

  <refsect1>
    <title>On-the-fly node creation</title>
    <para>
      Nodes can be created on-the-fly by passing the special handle id
      <constant>BUS1_HANDLE_INVALID</constant> along with a message. In this
      case a new node owned by the sending peer is created as well as a new
      handle held by the sending peer. This handle is sent along with the
      message and its handle id returned to userspace.
    </para>
  </refsect1>

  <refsect1>
    <title>Reachability</title>
    <para>
      A peer can only send a message to another peer if it holds a handle to one
      of its nodes. A handle to a node can be obtained from another peer who
      holds such a handle by passing it with a message. It follows that two
      peers that are disconnected (i.e., there are no path of handles, nodes and
      peers from one to the other) can never become connected and can never
      communicate. In order to make it possible for any peers to communicate at
      all, the <constant>BUS1_CMD_PEER_CLONE</constant> ioctl allows a new peer
      to be created from an existing one in such a way that they are connected
      at creation.
    </para>
  </refsect1>

  <refsect1>
    <title>Handle lifetime and scope</title>
    <para>
      A peer can hold at most one handle to a given node at a time, though the
      handle is reference counted. A handle first becomes valid when the peer
      receives it with a message, and the peer gains additional references to
      the handle each time it receives it. The handle remains valid until the
      peer either drops the last reference to it or receives a destruction
      notification for the handle.
    </para>
  </refsect1>

  <refsect1>
    <title>Releasing a handle</title>
    <para>
      A reference to a handle can be released by calling the
      <constant>BUS1_CMD_HANDLE_RELEASE</constant> ioctl. The ioctl takes an
      <type>__u64</type> as argument, which is the handle id of the handle to be
      released. When the last reference to a handle is released the handle id is
      no longer valid, and any future handle to the same node will be assigned
      a new handle id. Moreover, when the last reference to the last handle to a
      given node is released, a destruction notification is sent to the node and
      and the node is destroyed. This notification is ordered as if the release
      ioctl was a unicast send to the node. Any message ordered before the
      destruction notification is guaranteed to be unaffected by it, no message
      ordered after the destruction notification may be delivered to the node.
    </para>

    <para>
      It is worth noting that a handle may be in-flight, i.e., it has been sent
      from one peer to another without the destination peer receiving it yet.
      This may cause a situation where no peer holds a handle to a node, but the
      node is not destroyed as there are in-flight handles still pinning it.
    </para>
  </refsect1>

  <refsect1>
    <title>Destroying a node</title>
    <para>
      The owner of a node can destroy the node explicitly by calling the
      <constant>BUS1_CMD_NODE_DESTROY</constant> ioctl. The ioctl takes an
      <type>__u64</type> as argument, which is the original handle id associated
      with the node to be destroyed. A destruction notification is sent to all
      peers that hold a handle to the node. The destruction notification is
      ordered as if it were a multicast message from the owner of the node to
      all the holders of the handles. Any message to the node that is ordered
      before the destruction notification is guaranteed to be delivered, and any
      handle that is passed before the destruction notification is guaranteed to
      be delivered (and the peer that receives it to receive a destruction
      notification). No message may be delivered to the node ordered after the
      destruction notification and any handle passed after the destruction
      notification is replaced by <constant>BUS1_HANDLE_INVALID</constant>. A
      local handle to a node is valid until its destruction notification is
      received though actual operations on it may fail.
    </para>
  </refsect1>

  <refsect1>
    <title>Return value</title>
    <para>
      On success, all mentioned ioctl commands return <errorcode>0</errorcode>;
      on error, <errorcode>-1</errorcode> is returned, and
      <varname>errno</varname> is set to indicate the error. See
      <citerefentry>
        <refentrytitle>bus1</refentrytitle>
        <manvolnum>7</manvolnum>
      </citerefentry>
      for a list of possible error codes, in addition to the ones listed below.
    </para>

    <refsect2>
      <title>
        <constant>BUS1_CMD_NODE_DESTROY</constant> and
        <constant>BUS1_CMD_HANDLE_RELEASE</constant> may fail with the following
        errors
      </title>

      <variablelist>
        <varlistentry>
          <term><constant>ENXIO</constant></term>
          <listitem><para>
            The handle id is invalid.
          </para></listitem>
        </varlistentry>
      </variablelist>
    </refsect2>

  </refsect1>

  <refsect1>
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <citerefentry>
          <refentrytitle>bus1</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
      </member>
      <member>
        <citerefentry>
          <refentrytitle>bus1.peer</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
      </member>
      <member>
        <citerefentry>
          <refentrytitle>bus1.message</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
      </member>
    </simplelist>
  </refsect1>
</refentry>
