<?xml version='1.0'?> <!--*-nxml-*-->
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
        "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<refentry id="bus1">

  <refentryinfo>
    <title>bus1</title>
    <productname>bus1</productname>
  </refentryinfo>

  <refmeta>
    <refentrytitle>bus1</refentrytitle>
    <manvolnum>7</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>bus1</refname>
    <refpurpose>Kernel Message Bus</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>
    <para>
      bus1 is an inter-process communication bus system controlled by the
      kernel. It provides user-space with an API to create peers and send
      unicast and multicast messages between them. It does not enforce any
      layout on the transmitted data, but only provides the transport layer used
      for message interchange between peers.
    </para>
    <para>
      This set of man-pages gives a comprehensive overview of the kernel-level
      API, with all ioctl commands, associated structs and bit masks. However,
      most people will not use this API level directly, but rather let one of
      the high-level abstraction libraries help them integrate bus functionality
      into their applications.
    </para>
  </refsect1>

  <refsect1>
    <title>Description</title>
    <para>
      bus1 provides a character device at <filename>/dev/bus1</filename>. Any
      advanced operations are done via <function>ioctl()</function> on this
      file.
    </para>

  </refsect1>

  <refsect1>
    <title>Terminology</title>

    <refsect2>
      <title>Peer</title>
      <para>
        A peer is a client on the bus that can send or receive messages. A peer
        is represented by a file-descriptor created by opening
        <filename>/dev/bus1</filename> or by cloning an existing peer. See
        <citerefentry>
          <refentrytitle>bus1.peer</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
        for more details.
      </para>
    </refsect2>

    <refsect2>
      <title>Node</title>
      <para>
        A node is a representation of a generic object owend by a peer. A peer
        may own several nodes and their primary function is to be the recipient
        of messages. See
        <citerefentry>
          <refentrytitle>bus1.node</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
        for more details.
      </para>
    </refsect2>

    <refsect2>
      <title>Handle</title>
      <para>
        A handle is a reference to a node. A peer may hold several handles, both
        to nodes owned by itself and nodes owned by other peers. The destination
        of a message is always a handle, meaning the message will be delivered
        to the owner of the node the handle is referencing. A handle is local to
        its holder, but a copy of a handle may be passed from one peer to
        another along with a message. See
        <citerefentry>
          <refentrytitle>bus1.node</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
        for more details.
      </para>
    </refsect2>

    <refsect2>
      <title>Pool</title>
      <para>
        Each peer allocates a piece of shmem-backed memory that is used to
        receive messages. It is never used for sending. In order to access that
        memory, an application must <function>mmap()</function> it into its
        address space. See
        <citerefentry>
          <refentrytitle>bus1.pool</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
        for more details.
      </para>
    </refsect2>

    <refsect2>
      <title>Message</title>
      <para>
        Peers can exchange messages with other peers by addressing the peers
        with handles to their nodes. A message consists of a logical byte stream
        of arbitrary size. Messages can carry additional file descriptors or
        handles to nodes to be passed from one peer to another, just like
        passing file descriptors over UNIX domain sockets. See
        <citerefentry>
          <refentrytitle>bus1.message</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
        for more details.
      </para>
    </refsect2>

  </refsect1>

  <refsect1>
    <title>The ioctl interface</title>

    <para>
       As stated in the 'synopsis' section above, application developers are
       strongly encouraged to use bus1 through a the high-level abstraction
       library, rather than using the low-level API directly.
    </para>

    <para>
      bus1 on the kernel level exposes its functions exclusively through
      <citerefentry>
        <refentrytitle>ioctl</refentrytitle>
        <manvolnum>2</manvolnum>
      </citerefentry>,
      employed on file descriptors returned by
      <citerefentry>
        <refentrytitle>open</refentrytitle>
        <manvolnum>2</manvolnum>
      </citerefentry>
      on <filename>/dev/bus1</filename> or by the
      <constant>BUS1_CMD_PEER_CLONE</constant> ioctl described below.
    </para>

    <para>
      Following is a list of all the ioctls, along with the command structs they
      must be used with.
    </para>

    <informaltable frame="none">
      <tgroup cols="3" colsep="1">
        <thead>
          <row>
            <entry>ioctl signature</entry>
            <entry>command</entry>
            <entry>transported struct</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry><constant>0x0</constant></entry> <!-- XXX -->
            <entry><constant>BUS1_CMD_PEER_INIT</constant></entry>
            <entry><type>struct bus1_cmd_peer_init *</type></entry>
          </row>
          <row>
            <entry><constant>0x0</constant></entry>
            <entry><constant>BUS1_CMD_PEER_QUERY</constant></entry>
            <entry><type>struct bus1_cmd_peer_init *</type></entry>
          </row>
          <row>
            <entry><constant>0x0</constant></entry>
            <entry><constant>BUS1_CMD_PEER_RESET</constant></entry>
            <entry><type>struct bus1_cmd_peer_reset *</type></entry>
          </row>
          <row>
            <entry><constant>0x0</constant></entry>
            <entry><constant>BUS1_CMD_PEER_CLONE</constant></entry>
            <entry><type>struct bus1_cmd_peer_clone *</type></entry>
          </row>
          <row>
            <entry><constant>0x0</constant></entry>
            <entry><constant>BUS1_CMD_NODE_DESTROY</constant></entry>
            <entry><type>__u64</type></entry>
          </row>
          <row>
            <entry><constant>0x0</constant></entry>
            <entry><constant>BUS1_CMD_HANDLE_RELEASE</constant></entry>
            <entry><type>__u64</type></entry>
          </row>
          <row>
            <entry><constant>0x0</constant></entry>
            <entry><constant>BUS1_CMD_SLICE_RELEASE</constant></entry>
            <entry><type>__u64</type></entry>
          </row>
          <row>
            <entry><constant>0x0</constant></entry>
            <entry><constant>BUS1_CMD_SEND</constant></entry>
            <entry><type>struct bus1_cmd_send *</type></entry>
          </row>
          <row>
            <entry><constant>0x0</constant></entry>
            <entry><constant>BUS1_CMD_RECV</constant></entry>
            <entry><type>struct bus1_cmd_recv *</type></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>
      These ioctls, along with the structs they transport, are explained in
      detail in the other documents linked to in the "See Also" section below.
    </para>
  </refsect1>

  <refsect1>
    <title>Return values</title>

    <para>
      On success all bus1 ioctls return <errorcode>0</errorcode>; on failure,
      <errorcode>-1</errorcode> is returned and <varname>errno</varname> set to
      indicate the error.
    </para>

    <refsect2>
      <title>
        The following error codes are well defined and used throughout
      </title>

<!-- XXX: move the non-generic error-codes into their respective man-pages -->

      <variablelist>
        <varlistentry>
          <term><constant>ENOMEM</constant></term>
          <listitem><para>
            Out of kernel memory.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>EFAULT</constant></term>
          <listitem><para>
            Cannot acces ioctl parameters.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>EINVAL</constant></term>
          <listitem><para>
            Invalid parameters.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>EMSGSIZE</constant></term>
          <listitem><para>
            Parameters are too large or too small.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>ENOTTY</constant></term>
          <listitem><para>
            Unknown ioctl.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>ENXIO</constant></term>
          <listitem><para>
            Invalid handle.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>ESHUTDOWN</constant></term>
          <listitem><para>
            Local peer was already disconnected.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>ENOTCONN</constant></term>
          <listitem><para>
            Local peer is not initialized.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>EISCONN</constant></term>
          <listitem><para>
            Local peer is already initialized.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>EXFULL</constant></term>
          <listitem><para>
            Target memory pool is full.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>EDQUOT</constant></term>
          <listitem><para>
            Quota exceeded.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>EBADFD</constant></term>
          <listitem><para>
            Invalid file-descriptor.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>EPERM</constant></term>
          <listitem><para>
            Permission denied.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>EAGAIN</constant></term>
          <listitem><para>
            No messages ready to be dequeued.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>ETOOMANYREFS</constant></term>
          <listitem><para>
            User has too many in-flight file-descriptors.
          </para></listitem>
        </varlistentry>

        <varlistentry>
          <term><constant>EOPNOTSUPP</constant></term>
          <listitem><para>
            Could not pass file-descriptor of unsupported type.
          </para></listitem>
        </varlistentry>

      </variablelist>
    </refsect2>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <citerefentry>
          <refentrytitle>bus1.peer</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
      </member>
      <member>
        <citerefentry>
          <refentrytitle>bus1.node</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
      </member>
      <member>
        <citerefentry>
          <refentrytitle>bus1.message</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
      </member>
      <member>
        <citerefentry>
          <refentrytitle>bus1.pool</refentrytitle>
          <manvolnum>7</manvolnum>
        </citerefentry>
      </member>
    </simplelist>
  </refsect1>

</refentry>
